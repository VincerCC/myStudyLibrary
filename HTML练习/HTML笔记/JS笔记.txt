可以将js代码编写到外部js文件中，然后通过script标签引入
	<script type="text/javascript" src="js/script.js"></script>

可以将js代码编写到标签的onclick属性中当我们点击按钮时，js代码才会执行
	<button onclick="alert('讨厌，你点我干嘛~~');">点我一下</button>
	<p onclick="alert('讨厌，你点我干嘛~~');">点我一下</p>

可以将js代码写在超链接的href属性中，这样当点击超链接时，会执行js代码
	<a href="javascript:alert('让你点你就点！！');">你也点我一下</a>

JS的输出语句：（1）console.log("hello");
		       console.log("a="+a);//该语句用来在控制台输出一个日志
		  （2）alert("哥，你真帅啊！！");//该语句用来控制浏览器弹出警告框
		  （3）document.write();//该语句可以向body中输出一个内容
		   （4）confirm();//用于弹出一个带有确认和取消按钮的提示框。需要一个字符串作为参数，该字符串将会作为提示文字显示出来。如果用户点击确认则会返回true，如果点击取消则返回false



prompt()可以弹出一个提示框，该提示框中会带有一个文本框，
			 * 	用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，
			 * 	该字符串将会作为提示框的提示文字
			 * 
			 * 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容
			 *var score = prompt("请输入:");


声明变量：在js中使用var关键字来声明一个变量，不使用var声明的会成为全局变量

标识符
	* 	- 在JS中所有的可以由我们自主命名的都可以称为是标识符
	* 	- 例如：变量名、函数名、属性名都属于标识符
	* 	- 命名一个标识符时需要遵守如下的规则：
	* 		1.标识符中可以含有字母、数字、_、$
	* 		2.标识符不能以数字开头
	* 		3.标识符不能是ES中的关键字或保留字
	* 		4.标识符一般都采用驼峰命名法



在JS中一共有六种数据类型：
			 * 	String 字符串
						-在JS中字符串需要使用引号引起来
			 			 - 使用双引号或单引号都可以，但是不要混着用
			 			 - 引号不能嵌套，双引号不能放双引号，单引号不能放单引号


			 * 	Number 数值
						-在JS中所有的数值都是Number类型，包括整数和浮点数
						-JS中可以表示的数字的最大值
			 			* 	Number.MAX_VALUE
			 			* 		1.7976931348623157e+308
			 			* 	Number.MIN_VALUE 大于0的最小值
			 			* 		5e-324
						*超过了最大值，则会返回一个Infinity 表示正无穷,
									-Infinity 表示负无穷


			 * 	Boolean 布尔值
						-true：真
						-false：假

	
			 * 	Null 空值
						-Null（空值）类型的值只有一个，就是null
						-null这个值专门用来表示一个为空的对象，使用typeof检查一个null值时，会返回object



			 * 	Undefined 未定义
						-Undefined（未定义）类型的值只有一个，就undefined
			 * 	Object 对象


检查一个变量的类型:typeof 变量
			-检查字符串时，会返回string
			 -检查数值时，会返回number




***********************************************数据转换***********************************************

将其他的数据类型转换为String
			 *方式一：
			 * 		- 调用被转换数据类型的toString()方法，调用xxx的yyy()方法，就是xxx.yyy()
				---例：var a=123；即调用a=a.tostring()
			 * 		- 该方法不会影响到原变量，它会将转换的结果返回
			 * 		- 但是注意：null和undefined这两个值没有toString()方法，
			 * 			如果调用他们的方法，会报错
			 * 
			 *方式二：
			 * 		- 调用String()函数，并将被转换的数据作为参数传递给函数
				--例：var a=123；即调用a=String(a)



将其他的数据类型转换为Number
			 *方式一：
			 * 		使用Number()函数
				--例：var a = "123";a=Number(a);
			 * 			- 字符串 --> 数字
			 * 				1.如果是纯数字的字符串，则直接将其转换为数字
			 * 				2.如果字符串中有非数字的内容，则转换为NaN
			 * 				3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0
			 * 			- 布尔 --> 数字
			 * 				true 转成 1
			 * 				false 转成 0
			 * 
			 * 			- null --> 数字     0
			 * 
			 * 			- undefined --> 数字 NaN
			 * 
			 *方式二：
			 * 		- 这种方式专门用来对付字符串

			 * 		- parseInt() 把一个字符串转换为一个整数
					-parseInt()可以将一个字符串中的有效的整数内容去出来，然后转换为Number，可以在parseInt()中传递一个第二个参数，来指定转换成数字的进制a = parseInt(a,10);
				--例：var=a = "123567a567px";a = parseInt(a);返回值为123567

			 * 		- parseFloat() 把一个字符串转换为一个浮点数
						-parseFloat()作用它可以获得有效的小数
				--例：var=a = "123567.567px";a = parseInt(a);返回值为123567.567



将其他的数据类型转换为Boolean
			 * 	- 使用Boolean()函数
			 * 		- 数字 ---> 布尔
			 * 			- 除了0和NaN，其余的都是true
			 * 
			 * 		- 字符串 ---> 布尔
			 * 			- 除了空串，其余的都是true
			 * 
			 * 		- null和undefined都会转换为false
			 * 
			 * 		- 对象也会转换为true


************************************************运算符*************************************************

算数运算符
			 * 	当对非Number类型的值进行运算时，会将这些值转换为Number然后再运算
			 * 	任何值和NaN做运算都得NaN
			 * 
			 * 	+
			 * 		+可以对两个值进行加法运算，并将结果返回
			 * 		如果对两个字符串进行加法运算，则会做拼串
			 * 		会将两个字符串拼接为一个字符串，并返回
			 * 		任何的值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串的操作
			 * 	-
			 * 		- 可以对两个值进行减法运算，并将结果返回
			 * 
			 * 	*
			 * 		* 可以对两个值进行乘法运算

			 * 	/
			 * 		/ 可以对两个值进行除法运算

			 * 	%
			 * 		% 取模运算（取余数）

一元运算符
			只需要一个操作数
			 * 	+ 正号
			 * 		- 正号不会对数字产生任何影响
			 * 	- 负号
			 * 		- 负号可以对数字进行负号的取反
			 * 
			 * 	- 对于非Number类型的值，例：a=-true值为-1
			 * 		它会将先转换为Number，然后在运算
			 * 		可以对一个其他的数据类型使用+,来将其转换为number
			 * 		它的原理和Number()函数一样





&& || 非布尔值的情况
			 *  对于非布尔值进行与或运算时，
			 * 		会先将其转换为布尔值，然后再运算，并且返回原值
			 * 	&&运算：
			 * 		- 如果第一个值为true，则必然返回第二个值
			 * 		- 如果第一个值为false，则直接返回第一个值
			 * 
			 * 	||或运算
			 * 		- 如果第一个值为true，则直接返回第一个值
			 * 		- 如果第一个值为false，则返回第二个值


输出unicode编码，用\u转义，格式“\u四位编码”



			 * 	break关键字可以用来退出switch或循环语句
			 * 	不能在if语句中使用break和continue
			 * 	break关键字，会立即终止离他最近的那个循环语句
			 * 	continue关键字可以用来跳过当次循环
			 * 	同样continue也是默认只会对离他最近的循环循环起作用


************************************************************对象**************************************

创建对象方法一：var 对象名 = new Object();例：var obj = new Object();

在对象中保存的值称为属性----语法：对象.属性名 = 属性值;
					//JS对象的属性值，可以是任意的数据类型，甚至也可以是一个对象

				例：//向obj中添加一个name属性
					obj.name = "孙悟空";
				    //向obj中添加一个gender属性
					obj.gender = "男";
				    //向obj中添加一个age属性
					obj.age = 18;

				若要使用特殊的属性名，不能采用.的方式来操作
				 	* 	需要使用另一种方式：
				 	* 		语法：对象["属性名"] = 属性值
			 	 	* 	读取时也需要采用这种方式
						例：obj["！#￥@#%￥……￥……#%"] = 789;

创建对象方法二：使用对象字面量，可以在创建对象时，直接指定对象中的属性，语法：{属性名:属性值,属性名:属性值....}
		例：var obj = {
				
				name:"猪八戒",
				age:13,
				gender:"男",
				test:{name:"沙僧"}
				
			};





删除对象的属性----语法：delete 对象.属性名
				例：delete obj.name;

in 运算符
			 * 	- 通过该运算符可以检查一个对象中是否含有指定的属性
			 * 		如果有则返回true，没有则返回false
			 *  - 语法：
			 * 		"属性名" in 对象



使用工厂方法创建对象通过该方法可以大批量的创建对象。

例：function createPerson(name , age ,gender){
				//创建一个新的对象 
				var obj = new Object();
				//向对象中添加属性
				obj.name = name;
				obj.age = age;
				obj.gender = gender;
				obj.sayName = function(){
					alert(this.name);
				};
				//将新的对象返回
				return obj;
			}
			var obj2 = createPerson("猪八戒",28,"男");
			var obj3 = createPerson("白骨精",16,"女");
			var obj4 = createPerson("蜘蛛精",18,"女");
****************************************************函数***********************************************
函数 function，也是一个对象，可以封装一些功能（代码），在需要时可以执行这些功能（代码）封装到函数中的代码不会立即执行。

使用 函数声明 来创建一个函数----语法：function 函数名([形参1,形参2...形参N])
					{	语句...
								}这个方法用得比较多

使用 函数表达式 来创建一个函数---语法：var 函数名  = function([形参1,形参2...形参N])
					{	 语句....
							}

形参之间使用,隔开，声明形参就相当于在函数内部声明了对应的变量，即形参不用加var，会默认声明


立即执行函数
			 * 	函数定义完，立即被调用，这种函数叫做立即执行函数/
			 * 	立即执行函数往往只会执行一次
		例：(function(){
				alert("我是一个立即执行名函数~~~");
			})();

函数也可以称为对象的属性，
			 * 	如果一个函数作为一个对象的属性保存，
			 * 	那么我们称这个函数时这个对象的方法
			 * 	调用这个函数就说调用对象的方法
				例：   obj.sayName(); //调方法
					fun();//调函数

*************************************************函数的方法********************************************
* call()和apply()

	- 这两个方法都是函数对象的方法，需要通过函数对象来调用
	- 当对函数调用call()和apply()都会调用函数执行

	- 在调用call()和apply()可以将一个对象指定为第一个参数
		此时这个对象将会成为函数执行时的this。

*  call()方法可以将实参在对象之后依次传递

*  apply()方法需要将实参封装到一个数组中统一传递

例：var function fun(a,b) { }
	fun.call(obj,2,3);

	fun.apply(obj,[2,3]);

****************************************************枚举对象*******************************************
枚举对象中的属性，使用for ... in 语句----语法：for(var 变量 in 对象){   }
			
for...in语句 对象中有几个属性，循环体就会执行几次，每次执行时，会将对象中的一个属性的名字赋值给变量。

例：				var obj = {
						name:"孙悟空",
						age:18,
						gender:"男",
						address:"花果山"
					 };
				for(var n in obj){
					console.log("属性名:"+n);
					
					console.log("属性值:"+obj[n]);
							}
****************************************************构造函数*******************************************
构造函数就是一个普通的函数，也成为类，创建方式和普通函数没有区别,不同的是构造函数习惯上首字母大写。
	普通函数是直接调用，而构造函数需要使用new关键字来调用
		构造函数的执行流程：
			 * 	1.立刻创建一个新的对象
			 * 	2.将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象
			 * 	3.逐行执行函数中的代码
			 * 	4.将新建的对象作为返回值返回
例：function Person(name , age , gender){
				this.name = name;
				this.age = age;
				this.gender = gender;
				//向对象中添加一个方法
				//this.sayName = fun;
			}
  		function fun(){
				alert("Hello大家好，我是:"+this.name);}


		通过一个构造函数创建的对象，称为是该类的实例

	使用instanceof可以检查一个对象是否是一个类的实例，如果是，则返回true，否则返回false
							语法：
			 * 					对象 instanceof 构造函数


this指向的是一个对象，根据函数的调用方式的不同，this会指向不同的对象
			 * 		1.以函数的形式调用时，this永远都是window（全局）
			 * 		2.以方法的形式调用时，this就是调用方法的那个对象
			 *		3.当以构造函数的形式调用，this就是新创建的那个对象
			 * 		4.使用call和apply调用时，this是指定的那个对象

****************************************************原型对象*******************************************
原型 prototype，我们所创建的每一个函数，解析器都会向函数中添加一个隐藏属性prototype
	如果函数作为普通函数调用prototype没有任何作用
		当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性

原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。

当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，
			 	如果没有则会去原型对象中寻找，如果找到则直接使用

以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，
	这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了

	
		例：	function MyClass(){
				
			}
			
			//向MyClass的原型中添加属性a
			MyClass.prototype.a = 123;
			
			//向MyClass的原型中添加一个方法
			MyClass.prototype.sayHello = function(){
				alert("hello");
			};

可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，使用该方法只有当对象自身中含有属性时，才会返回true。
例：console.log(mc.hasOwnProperty("age"));检查mc对象中是否有age属性

***************************************************数组************************************************
		
创建数组：var arr = new Array();
向数组中添加元素，数组中的元素可以是任意的数据类型：数组[索引] = 值
			例：arr[0] = 10;
			    arr[1] = 33;
			    arr[2] = 22;
			    arr[3] = 44;
//也可以是对象
			var obj = {name:"孙悟空"};
			arr[arr.length] = obj;

//也可以是一个函数
			arr = [function(){alert(1)},function(){alert(2)}];

//数组中也可以放数组，如下这种数组我们称为二维数组
			arr = [[1,2,3],[3,4,5],[5,6,7]];

获取数组的长度：数组.length
修改length：如果修改的length大于原长度，则多出部分会空出来
	    如果修改的length小于原长度，则多出的元素会被删除.
向数组的最后一个位置添加元素：数组[数组.length] = 值;


使用字面量来创建数组，可以在创建时就指定数组中的元素：
		例：var arr = [1,2,3,4,5,10];//创建一个数组，数组中有三个元素1,2,3,4,5,10
		    var arr = [10];//创建一个数组，数组中只有一个元素10
使用构造函数创建数组时，也可以同时添加元素
		例：var arr2 = new Array(10,20,30);//创建一个数组，数组中有三个元素10，20,30
		    var arr2 = new Array(10);//创建一个长度为10的数组

***************************************************数组的方法******************************************

* push()
	- 该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度
例：var arr = ["孙悟空","猪八戒","沙和尚"];
    arr.push("唐僧","蜘蛛精","白骨精","玉兔精");
    var result = arr.push;//result值为7

* pop()
	- 该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回
例：var arr = ["孙悟空","猪八戒","沙和尚"];
    arr.pop();//删除最后一个元素沙和尚
    var result = arr.pop();
//返回结果为删除的元素沙和尚

* unshift()
	- 向数组开头添加一个或多个元素，并返回新的数组长度
	- 向前边插入元素以后，其他的元素索引会依次调整
例：var arr = ["孙悟空","猪八戒","沙和尚"];
    arr.unshift("牛魔王","二郎神");//此时数组为"牛魔王","二郎神"，"孙悟空","猪八戒","沙和尚"
    var result = arr.unshift;//result值为5

* shift()
	- 可以删除数组的第一个元素，并将被删除的元素作为返回值返回
例：var arr = ["孙悟空","猪八戒","沙和尚"];
    arr.shift();
//删除孙悟空
    result = arr.shift();

//返回结果为删除的元素孙悟空

* slice()
	- 可以用于删除数组中的指定元素
	- 使用splice()会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回
	- 参数：
		* 		第一个，表示开始位置的索引
		* 		第二个，表示删除的数量
		* 		后边可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边
例：var arr = ["孙悟空","猪八戒","沙和尚"];
    arr.slice(1,2)；//表示从arr[1]开始，删除两个元素，即删除猪八戒和沙和尚
    arr.splice(0,1,"牛魔王","铁扇公主","红孩儿");//表示从arr[0]开始，删除一个元素，即删除孙悟空，并在删							除的元素位置添加"牛魔王","铁扇公主","红孩儿"

* concat()
	- 该方法可以连接两个或多个数组，并将新的数组返回，不会对原数组产生影响
例：var arr = ["孙悟空","猪八戒","沙和尚"];
	
    var arr2 = ["白骨精","玉兔精","蜘蛛精"];

    var result =arr.concat(arr,arr2,"牛魔王","铁扇公主");//表示将arr和arr2连接起来，并且在他们后边加上								牛魔王，铁扇公主
*splice()
	-删除从 index 处开始的零个或多个元素

* join()
	- 该方法可以将数组转换为一个字符串
	- 在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，若不指定连接符，	  则默认使用,作为连接符

*split(",")
	-可以将字符串转换为一个数组

* reverse()
	- 该方法用来反转数组
	- 该方法会直接修改原数组
例：var arr = ["孙悟空","猪八戒","沙和尚","唐僧"];
    arr.reverse();

* sort()
	- 可以用来对数组中的元素进行排序
	- 也会影响原数组，默认会按照Unicode编码进行排序，对数字进排序时，可能会得到错误的结果
	-以在sort()添加一个回调函数，来指定排序规则，回调函数中需要定义两个形参
	-如果返回一个大于0的值，则元素会交换位置，降序
	 如果返回一个小于0的值，则元素位置不变，升序
	 如果返回一个0，则认为两个元素相等，也不交换位置
	 
	arr.sort(function(a,b){
				if(a > b){
					return -1;
				}else if(a < b){
					return 1;
				}else{
					return 0;
				}
			});

**************************************************Date对象*********************************************
创建一个Date对象：var d = new Date();
	如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间
创建一个指定的时间对象:var d2 = new Date("2/18/2011 11:10:30");//月份/日/年 时:分:秒

* getDate()
	- 获取当前日期对象是几日
* getDay()
	- 获取当前日期对象时周几
	-会返回一个0-6的值，0 表示周日，6表示周六

* getMonth()
	- 获取当前时间对象的月份
	- 会返回一个0-11的值，0 表示1月，11 表示12月

* getFullYear()
	-获取当前日期对象的年份

* getTime()
	- 获取当前日期对象的时间戳
	- 时间戳，指的是从格林威治标准时间的1970年1月1日0时0分0秒，到当前日期所花费的毫秒数（1秒 = 1000毫秒）

**************************************************Math*************************************************

* Math.PI 表示圆周率
* Math.abs()可以用来计算一个数的绝对值
* Math.ceil()可以对一个数进行向上取整，小数位只要有值就自动进1
* Math.floor()可以对一个数进行向下取整，小数部分会被舍掉
* Math.round()可以对一个数进行四舍五入取整
* Math.pow(x,y)返回x的y次幂
* Math.sqrt()用于对一个数进行开方运算
* Math.max() 可以获取多个数中的最大值例：Math.max(10,45,30,100);

* Math.min() 可以获取多个数中的最小值
* Math.random()可以用来生成一个0-1之间的随机数
	生成一个x-y之间的随机数：Math.round(Math.random()*(y-x)+x)

************************************************字符串的方法*******************************************

* length
	- 可以用来获取字符串的长度
例：var str = "Hello Atguigu";
    var result=str.length；//result值为13

* charAt()
	- 可以返回字符串中指定位置的字符
	- 根据索引获取指定的字符
例：var str = "中Hello Atguigu";
    var result = str.charAt(6);//result为o

* charCodeAt()
	- 获取指定位置字符的字符编码（Unicode编码）

 * String.formCharCode()
	- 可以根据字符编码去获取字符
例：result = String.fromCharCode(0x2692);

* concat()
	- 可以用来连接两个或多个字符串（用+连接更方便）
例：result = str.concat("你好","再见");

* indexof()
	- 该方法可以从前往后找，检索一个字符串中是否含有指定内容
	- 如果字符串中含有该内容，则会返回其第一次出现的索引，如果没有找到指定的内容，则返回-1
	- 可以指定一个第二个参数，指定开始查找的位置
* lastIndexOf();
	- 该方法的用法和indexOf()一样，从后往前找，检索一个字符串中是否含有指定内容
例：var str = "hello hatguigu";
    result = str.indexOf("h",1);//从索引为1开始检索，找h，返回6
    result = str.lastIndexOf("h",5);//从索引为5开始检索，找h，返回0

* slice()
	- 可以从字符串中截取指定的内容
	- 不会影响原字符串，而是将截取到内容返回
	- 参数：
		第一个，开始位置的索引（包括开始位置）
		第二个，结束位置的索引（不包括结束位置)如果省略第二个参数，则会截取到后边所有的
		也可以传递一个负数作为参数，负数的话将会从后边计算
例：var str = "abcdefghijk";
    var result = str.slice(1,4);
//从索引为1开始，截取到索引为4的位置，返回bcd
    var result = str.slice(1,-1);
//从索引为1开始，截止到倒数第一个索引位置，返回为bcdefghij

* substring()
	- 可以用来截取一个字符串
	- 参数：
		- 第一个：开始截取位置的索引（包括开始位置）
		- 第二个：结束位置的索引（不包括结束位置）这个方法不能接受负值作为参数
			  如果传递了一个负值，则默认使用0
		- 而且他还自动调整参数的位置，如果第二个参数小于第一个参数，则自动交换两个参数

* substr()
	- 用来截取字符串
	- 参数：
		1.截取开始位置的索引
		2.截取的长度
例：var str = "abcdefg";
    var result = str.substr(3,2);//从索引为3开始，截取2个，返回为de

* split()
	- 可以将一个字符串拆分为一个数组
	- 参数：需要一个字符串作为参数，将会根据该字符串去拆分数组
		如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素
例：var str = "abcbcdefghij";
    var result = str.split("");//返回a,b,c,b,c,d,e,f,g,h,i,j

* toUpperCase()
	- 将一个字符串转换为大写并返回
* toLowerCase()
	-将一个字符串转换为小写并返回
例：var str = "abcdeFGHIJK";
    var result=str.toUpperCase();//返回为ABCDEFGHIJK
    var result=str.toLowerCase();//返回为abcdefghijk

************************************************正则表达式*******************************************
创建正则表达式的对象，使用构造函数创建更加灵活
		-语法：var 变量 = new RegExp("正则表达式","匹配模式");
			匹配模式可省略，或者i忽略大小写，g全局匹配模式

正则表达式的方法：test()
			-使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，符合则返回true，否			 则返回false
例：var reg = new RegExp("ab","i");//可以来检查一个字符串中是否含有ab
    var str = "a";
    var result = reg.test(str);//检查在str中是否有ab，返回结果为false

使用字面量来创建正则表达式，使用字面量的方式创建更加简单
		-语法：var 变量 = /正则表达式/匹配模式
例：
//创建一个正则表达式，检查一个字符串中是否有a或b或c
/*
* 使用 | 表示或者的意思,[]里的内容也是或的关系
*/
reg = /a|b|c/;
reg =/[abc]/;

/*
 * 创建一个正则表达式检查一个字符串中是否有字母
 *	[ab] == a|b
 *	[a-z] 任意小写字母
 *	[A-Z] 任意大写字母
 *	[A-z] 任意字母
 *	[0-9] 任意数字
 *	[^ ] 除了   例：reg = /[^ab]/;//除了ab
 */

********************************************正则表达式和字符串的方法***********************************
* split()
	- 可以将一个字符串拆分为一个数组
	- 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串
	- 这个方法即使不指定全局匹配，也会全都插分
例：var str = "1a2b3c4d5e6f7";
    var result = str.split(/[A-z]/);//根据任意字母来将字符串拆分,结果为1234567

 * search()
	- 可以搜索字符串中是否含有指定内容
	- 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1
	- 它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串
	- serach()只会查找第一个，即使设置全局匹配也没用
例：var str = "hello abc hello aec afc";
    var result = str.search(/a[bef]c/);//搜索字符串中是否含有abc 或 aec 或 afc

* match()
	- 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来
	- 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索
		我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容
		可以为一个正则表达式设置多个匹配模式，且顺序无所谓
	- match()会将匹配到的内容封装到一个数组中返回
例：var str = "1a2a3a4a5e6f7A8B9C";
    var result = str.match(/[a-z]/ig);//将a-z的字母,不区分大小写提取出来，返回结果为a,a，a,a,e,f,A,B,C

* replace()
	- 可以将字符串中指定内容替换为新的内容，默认只会替换第一个
	 - 参数：
		1.被替换的内容，可以接受一个正则表达式作为参数
		2.新的内容
例：var str = "1a2a3a4a5e6f7A8B9C";
    var result = str.replace(/a/g,"@");//将字符串中a全局匹配，替换为@，返回结果为1@2@3@4@5e6f7A8B9C



			/* 量词
			 * 	- 通过量词可以设置一个内容出现的次数
			 * 	- 量词只对它前边的一个内容起作用
			 * 	- {n} 正好出现n次
			 * 	- {m,n} 出现m-n次
			 * 	- {m,} m次以上
			 * 	- + 至少一个，相当于{1,}
			 * 	- * 0个或多个，相当于{0,}
			 * 	- ? 0个或1个，相当于{0,1}
			 */	
* 创建一个正则表达式检查一个字符串中是否含有aaa
  var reg = /a{3}/;

* 检查一个字符串中是否以a开头
	* 	^ 表示开头
	*	$ 表示结尾
例：var reg = /^a/; //匹配开头的a
    var reg = /$a/; //匹配结尾的a
    reg = /^a$/;//a既是开头，也必须是结尾


			/* \w	- 任意字母、数字、_  [A-z0-9_]
			 * \W	- 除了字母、数字、_  [^A-z0-9_]
			 * \d	- 任意的数字 [0-9]
			 * \D	- 除了数字 [^0-9]
			 * \s	- 空格
			 * \S	- 除了空格
			 * \b	- 单词边界  " hello child  boy"空格为单词的边界
			 * \B	- 除了单词边界
			 */
	* 创建一个正则表达式检查一个字符串中是否含有单词child
	例：var reg = /\bchild\b/;
	    console.log(reg.test("hello children"));//因为children不为child，返回为false.


//接收一个用户的输入	var str = "              he      llo                ";
			//去除掉字符串中的前后的空格，去除空格就是使用""来替换空格
			str = str.replace(/^\s*/g, "");//匹配开头的空格，用""替换

			str = str.replace(/\s*$/g, "");//匹配结尾的空格，用""替换

			str = str.replace(/^\s*|\s*$/g,"");//去除开头和结尾的空格
			str = str.replace(/\s*/g,""); //去除所有空格:  
			str = str.replace(/^^\s*|^\s*$/g,"");//去除中间所有空格:
*****************************************************************************************************************

//通过id获取元素
				var 变量名=document.getElementById("id名");

//通过name属性获取元素
				var 变量名=document.getElementsByName("name属性");

//通过标签获取元素
				var 变量名=document.getElementsByTagName("标签名");
				这个方法会给我们返回一个数组对象。。。


//查找节点
				获取id为city的元素
				var city = document.getElementById("city");
					
				查找#city下所有li节点
				var lis = city.getElementsByTagName("li");

//childNodes查找子节点，会获取包括文本（也会获取到空格）节点在内的所有节点
				//获取id为city的节点
				var city = document.getElementById("city");
				//返回#city的所有子节点
				var cns = city.childNodes;
			* 注意：在IE8及以下的浏览器中，不会将空白文本当成子节点


//children获取当前元素的所有子元素
				//获取id为city的节点
				var city = document.getElementById("city");
				var cns2 = city.children;


//firstChild可以获取到当前元素的第一个子节点（包括空白文本节点）
				//获取id为phone的元素
				var phone = document.getElementById("phone");
				//返回#phone的第一个子节点
				var fir = phone.firstChild;

//parentNode返回元素的父节点
				//获取id为bj的节点
				var bj = document.getElementById("bj")；
				//返回#bj的父节点
				var pn = bj.parentNode;


//previousSibling返回前一个兄弟节点（也可能获取到空白的文本）
				//获取id为android的元素
				var and = document.getElementById("android");
				//返回#android的前一个兄弟节点
				var ps = and.previousSibling;

//nextSibling获取当前元素的后一个兄弟节点



//获取body标签
			var body = document.getElementsByTagName("body")[0];

//documentElement获取html根标签
			var html = document.documentElement;

//document.all代表页面中所有的元素
			var all = document.all;


//document.querySelector()
			- 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象
			- 使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个


//document.querySelectorAll()
			- 该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回
例：var div = document.querySelector(".box1 div");//找class为box1里的div节点


***********************************DOM修改***********************************************************
//document.createElement()
			-可以用于创建一个元素节点对象
			-需要一个标签名作为参数，会根据该标签名创建元素节点对象
例：var li = document.createElement("li");//创建一个li节点

//document.createTextNode()
			-可以用来创建一个文本节点对象
			-需要一个文本内容作为参数，将会根据该内容创建文本节点，			 并将新的节点返回
例：var gzText = document.createTextNode("广州");//创建广州文本节点

//appendChild()
			-向一个父节点中添加一个新的子节点
			- 用法：父节点.appendChild(子节点);
例：li.appendChild(gzText);//将gzText设置li的子节点


//insertBefore()
			-可以在指定的子节点前插入新的子节点
			- 语法：父节点.insertBefore(新节点,旧节点);或者parentNode.insertBefore(新节点,旧节点);
例：city.insertBefore(li , bj);//将li节点插入到bj节点前面


// replaceChild()
			- 可以使用指定的子节点替换已有的子节点
			- 语法：父节点.replaceChild(新节点,旧节点);
例：city.replaceChild(li , bj);在city节点中，将bj节点替换为li节点


//removeChild()
			- 可以删除一个子节点
			-语法：父节点.removeChild(子节点);
			       子节点.parentNode.removeChild(子节点);
			-不知道父节点是谁时可以通过 子节点.parentNode获取父节点



*innerHTML用于获取元素内部的HTML代码
*innerText用于获取元素内部的文本内容

//为按钮绑定一个单击回调函数
				var btn01 = document.getElementById("btn");//先找到id为btn的元素
				btn01.onclick = function(){};//绑定单击回调函数

如果将JS写在head标签或者外部js文件中，需要加上 window.onload=function(){
						 所有代码在里边写
						     };



****************************************DOM对CSS的操作*********************************************
	- 读取和修改内联样式
		- 使用style属性来操作元素的内联样式
		- 读取内联样式：
			语法：元素.style.样式名
			- 例子：
				元素.style.width
				元素.style.height
				- 注意：如果样式名中带有-，则需要将样式名修改为驼峰命名法
					将-去掉，然后-后的字母改大写
				- 比如：background-color --> backgroundColor
						border-width ---> borderWidth
						
		- 修改内联样式：
			语法：元素.style.样式名 = 样式值

！！！！！！！！- 通过style修改的样式都是内联样式，由于内联样式的优先级比较高，
				所以我们通过JS来修改的样式，往往会立即生效，
				但是如果样式中设置了!important，则内联样式将不会生效。


				
	- 读取元素的当前样式
		 ！！！！- 正常浏览器
			- 使用getComputedStyle()
			- 这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式
			- 参数：
				1.要获取样式的元素
				2.可以传递一个伪元素，一般传null
			- 例子：
				获取元素的宽度
					getComputedStyle(box , null)["width"];
			- 通过该方法读取到样式都是只读的不能修改
 
		 ！！！！- IE8
			- 使用currentStyle
			- 语法：
				元素.currentStyle.样式名
			- 例子：
				box.currentStyle["width"]
			- 通过这个属性读取到的样式是只读的不能修改


			 /*
			 * 定义一个函数，用来获取指定元素的当前的样式
			 * 参数：
			 * 		obj 要获取样式的元素
			 * 		name 要获取的样式名，例："height"
			 */
			
		function getStyle(obj , name){
			if(window.getComputedStyle){
				//正常浏览器的方式，具有getComputedStyle()方法
			return getComputedStyle(obj , null)[name];
			}else{
				//IE8的方式，没有getComputedStyle()方法
			return obj.currentStyle[name];
			}	
			}

	- 其他的样式相关的属性
		注意：以下样式都是只读的
	
		clientHeight
			- 元素的可见高度，指元素的内容区和内边距的高度
		clientWidth
			- 元素的可见宽度，指元素的内容区和内边距的宽度
			- document.documentElement.clientWidth，document.documentElement.clientWidth就是自适应宽度高度，也就是浏览器多宽（高）他就多宽（高）！！！！！



		clientX 事件属性返回当事件被触发时鼠标指针相对于浏览器页面（或客户区）的水平坐标。
		clientY 事件属性返回当事件被触发时鼠标指针相对于浏览器页面（或客户区）的垂直坐标。



		offsetHeight
			- 整个元素的高度，包括内容区、内边距、边框
		offfsetWidth
			- 整个元素的宽度，包括内容区、内边距、边框
		offsetParent
			- 当前元素的定位父元素
			- 离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body
		offsetLeft
		offsetTop
			- 当前元素和定位父元素之间的偏移量
			- offsetLeft水平偏移量  offsetTop垂直偏移量
		
		scrollHeight
		scrollWidth
			- 获取元素滚动区域的高度和宽度

-----------  常用API，获取元素的相对于视口的相对位置
		    .getBoundingClientRect();
			这个API返回6个值：
			1、bottom和right，元素右下角到视口的距离
			2、left和top，元素左上角到视口的距离
			3、height和width，(元素尺寸+边框尺寸)的大小
			.getBoundingClientRect().top;就是元素到视口上边的距离
			.getBoundingClientRect().left;就是元素到视口左边的距离

		
	 	scrollTop
		scrollLeft
			- 获取元素垂直和水平滚动条滚动的距离
			-chrome认为浏览器的滚动条是body的，可以通过document.body.scrollTop来获取
			-火狐等浏览器认为浏览器的滚动条是html的，可以通过document.documentElement.scrollTop获取

	获取滚动条滚动距离：
		1、横向距离document.documentElement.scrollLeft||（解决兼容性问题）document.body.scrollLeft;
		2、纵向距离document.documentElement.scrollTop||（解决兼容性问题）document.body.scrollTop;
			
		判断滚动条是否滚动到底
			- 垂直滚动条
				scrollHeight - scrollTop = clientHeight
				
			- 水平滚动	
				scrollWidth - scrollLeft = clientWidth



****************************************鼠标的事件对象*************************************************

* 事件对象
		  - 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数,
		  - 在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标  键盘哪个按键被按下  鼠标滚轮滚动的方向。。。


* onmousemove
		- 该事件将会在鼠标在元素中移动时被触发
例：对象.onmousemove = function(event){

	event = event || window.event;//解决浏览器兼容问题

	 * clientX可以获取鼠标指针的水平坐标
	 * cilentY可以获取鼠标指针的垂直坐标
	var x = event.clientX;
	var y = event.clientY;
	};

* onmousedown
		- 该事件将会在鼠标在元素中点击时被触发

* onmouseup
	 	- 该事件将会在鼠标在元素中松开时被触发

* 事件的冒泡（Bubble）
		- 所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发
		- 在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡
			//可以将事件对象的cancelBubble设置为true，即可取消冒泡
				event.cancelBubble = true;



* addEventListener()
				 *  - 通过这个方法也可以为元素绑定响应函数
				 *  - 参数：
				 * 		1.事件的字符串，不要on
				 * 		2.回调函数，当事件触发时该函数会被调用
				 * 		3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false
				 * 
				 * 使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，
				 * 	这样当事件被触发时，响应函数将会按照函数的绑定顺序执行
				 * 
				 * 这个方法不支持IE8及以下的浏览器

			function bind(obj , eventStr , callback){//将函数封装到一个函数里
				//参数obj，是你要绑定的对象
				//参数eventstr是你要绑定的事件名，例如单击函数click，不需要on
				if(obj.addEventListener){
					//大部分浏览器兼容的方式
					obj.addEventListener(eventStr , callback , false);
				}else{
					/*
					 * this是谁由调用方式决定
					 * callback.call(obj)
					 */
					//IE8及以下
					obj.attachEvent("on"+eventStr , function(){
						//在匿名函数中调用回调函数
						callback.call(obj);
					});
				}




****************************************键盘的事件对象*************************************************

onkeydown
				 * 		- 按键被按下
				 * 		- 对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发
				 * 		- 当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快
				 * 			这种设计是为了防止误操作的发生。

onkeyup
				 * 		- 按键被松开

keyCode
					 * 可以通过keyCode来获取按键的编码
					 * 	通过判断37-40可以判断哪个按键被按下
						* keyCode=37 左，38 上，39 右，40 下

					 * 	altKey
					 * 	ctrlKey
					 * 	shiftKey
					 * 		- 这个三个用来判断alt ctrl 和 shift是否被按下
					 * 			如果按下则返回true，否则返回false