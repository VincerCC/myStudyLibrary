<!-- 注释-->
<!-- 
	<!doctype html>  h5的文档声明，声明当前的网页是按照HTML5标准编写的
		编写网页时一定要将h5的文档声明写在网页的最上边
	如果不写文档声明，则会导致有些浏览器会进入一个怪异模式，
		进入怪异模式以后，浏览器解析页面会导致页面无法正常显示，所以为了避免进入该模式，一定要写文档声明
-->
<!doctype html>


<html>

	<!-- meta标签用来设置网页的一些元数据，比如网页的字符集，关键字、简介。需要来告诉浏览器，网页所采用的编码字符集-->
	<meta charset="utf-8" />



	<!-- 使用meta标签还可以用来设置网页的关键字-->
	<meta name="keywords" content="HTML5,JavaScript,前端,Java" />

	<!-- 还可以用来指定网页的描述
			搜索引擎在检索页面时，会同时检索页面中的关键词和描述，但是这两个值不会影响页面在搜索引擎中的排名-->
		<meta name="description" content="发布h5、js等前端相关的信息" />
		
	<!-- 
			使用meta可以用来做请求的重定向
			<meta http-equiv="refresh" content="秒数;url=目标路径" />，代表多少秒后页面跳转到指定网页
	-->
		


	<!-- head标签，该标签中的内容，不会在网页中直接显示，它用来帮助浏览器解析页面的-->	
	<head>
		
		<!--
			
			内联样式   <p style font="color:red">我是标签</p>
			样式表格式：
		<style type="text/css">
				p
					{
						/*设置背景颜色*/
						background-color: brown;  
					
						
					    	/* 使用background-image来设置背景图片*/
						 *- 语法：background-image:url(相对路径);/background:url(相对路径)
							当需要插入两个背景图片时，可以background:url(相对路径)，url(相对路径)
				/*background-repeat用于设置背景图片的重复方式*/
				 * 可选值：
				 * 	repeat，默认值，背景图片会双方向重复（平铺）
				 * 	no-repeat ，背景图片不会重复，有多大就显示多大
				 * 	repeat-x， 背景图片沿水平方向重复
				 * 	repeat-y，背景图片沿垂直方向重复


				background-image:url(相对路径) repeat-x;简写方式


				/*通过background-position可以调整背景图片在元素中的位置*/
				 * 可选值：
				 * 		该属性可以使用 top right left bottom center中的两个值
				 * 			来指定一个背景图片的位置
				 * 			top left 左上
				 * 			bottom right 右下
				也可以直接指定两个偏移量，
				 * 第一个值是水平偏移量
				 * 	- 如果指定的是一个正值，则图片会向右移动指定的像素
				 * 	- 如果指定的是一个负值，则图片会向左移动指定的像素
				 * 第二个是垂直偏移量	
				 * 	- 如果指定的是一个正值，则图片会向下移动指定的像素
				 * 	- 如果指定的是一个负值，则图片会向上移动指定的像素
				例：background-position: -80px -40px

**********同时插入两张背景图片，并且设置不重复，靠右上显示 background:url(相对路径)，url(相对路径) no-repeat right top;**********

			/*background-attachment用来设置背景图片是否随页面一起滚动*/
				 * 		可选值：
				 * 			scroll，默认值，背景图片随着窗口滚动
				 * 			fixed，背景图片会固定在某一位置，不随页面滚动
				 * 
				 * 不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素
			* 当背景图片的background-attachment设置为fixed时，
				 		* 	背景图片的定位永远相对于浏览器的窗口


			/*给超链接设置背景图片后，
 				* 由于加载图片需要一定的时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况
			 	* 	为了解决该问题，可以将三个图片整合为一张图片，这样可以同时将三张图片一起加载，就不会出现闪烁的问题了，
		 		* 	然后在通过background-position来切换要显示的图片的位置，这种技术叫做图片整合技术（CSS-Sprite）

				给超链接设置背景图片，例：
			a:link{
				/*将a转换为块元素*/
				display: block;
				/*设置宽高*/
				width: 93px;
				height: 29px;
				/*设置背景图片*/
				background-image: url(img/btn/btn2.png);
				/*设置背景图片不重复*/
				background-repeat: no-repeat;
				
			}
*/




						color: orange;
						font-size: 20px;
	
						/*设置字体颜色,使用color来设置文字的颜色*/
						* color: red;
						*background-color:设置背景颜色，语法：#红色绿色蓝色
						*可用16进制数#000000~#ffffff
						*红色：#ff0000  绿色：#00ff00  蓝色：#0000ff
						* font-size:设置文字的大小,浏览器中一般默认的文字大小都是16px
				 		
				 		* 通过font-family:可以指定文字的字体
				 		* 	当采用某种字体时，如果浏览器支持则使用该字体，
				 		* 		如果字体不支持，则使用默认字体
				 		* 该样式可以同时指定多个字体，多个字体之间使用,分开
				 				* 	当采用多个字体时，浏览器会优先使用前边的字体，
				 		* 		如果前边没有在尝试下一个
						/*font-family: 华文彩云 , 微软雅黑;*/
						*font-style:可以用来设置文字的斜体
				 		* 	- 可选值：
				 		* 		normal，默认值，文字正常显示
				 		* 		italic 文字会以斜体显示
						font-weight可以用来设置文本的加粗效果：
						* 	― 可选值：
				 		* 		normal，默认值，文字正常显示
				 		* 		bold，文字加粗显示

						* 在CSS并没有为我们提供一个直接设置行间距的方式，
			 
						* 	我们只能通过设置行高来间接的设置行间距，行高越大行间距越大
			 
						* 使用line-height来设置行高 行高可以用来设置垂直居中
			 
						* 	行高类似于我们上学单线本，单线本是一行一行，线与线之间的距离就是行高，
			 
						* 	网页中的文字实际上也是写在一个看不见的线中的，而文字会默认在行高中垂直居中显示
			 			 
						* 行间距 = 行高 - 字体大小
	
						*line-height: 200px;



		*text-align:center;/*文本居中对齐*/		 
					
				 		* text-transform可以用来设置文本的大小写
						* 	可选值：
						* 		none 默认值，该怎么显示就怎么显示，不做任何处理
				 		* 		capitalize 单词的首字母大写，通过空格来识别单词
				 		* 		uppercase 所有的字母都大写
				 		* 		lowercase 所有的字母都小写
				 		* text-decoration可以用来设置文本的修饰
				 		* 		可选值：
				 		* 			none：默认值，不添加任何修饰，正常显示
				 		* 			underline 为文本添加下划线
				 		* 			overline 为文本添加上划线
				 		* 			line-through 为文本添加删除线
						*超链接会默认添加下划线，也就是超链接的text-decoration的默认值是underline
				 	如果需要去除超链接的下划线则需要将该样式设置为none
						* letter-spacing可以指定字符间距
						* word-spacing可以设置单词之间的距离




			*盒子模型
				 *使用width来设置盒子内容区的宽度,块元素可以设置
				 			内联元素不能设置width和height
				 
				 * 使用height来设置盒子内容区的高度
				 * 为元素设置边框
				 * 	要为一个元素设置边框必须指定三个样式

					ej:	border: 2px solid #aac;

				 * 		border-width:边框的宽度，除了border-width，CSS中还提供了四个border-xxx-width
				 		xxx的值可能是
								top上
								right右 
								bottom下
								left左

				 * 		border-color:边框颜色，和宽度一样，color也提供四个方向的样式，可以分别指定颜色
				 				border-xxx-color

				 * 		border-style:边框的样式，
				 * 					可选值：
				 * 						none，默认值，没有边框
				 * 						solid 实线
				 * 						dotted 点状边框
				 * 						dashed 虚线
				 * 						double 双线
				 * 
				 * 					style也可以分别指定四个边的边框样式，规则和width一致，
									同时它也提供border-xxx-style四个样式，来分别设置四个边


				 * 内边距（padding），指的是盒子的内容区与盒子边框之间的距离，块元素全部支持
				 * 	一共有四个方向的内边距：
				 * 		padding-top	内联元素(span)可以设置垂直方向内边距，但是不会影响页面的布局
				 * 		padding-right    内联元素(span)可以设置水平方向的内边距
				 * 		padding-bottom   内联元素(span)可以设置垂直方向内边距，但是不会影响页面的布局
				 * 		padding-left     内联元素(span)可以设置水平方向的内边距
				 * 	盒子的大小由内容区、内边距和边框共同决定

				 * 外边距：(margin)，块元素都支持
				 * 	margin-top	内联元素不支持垂直外边距
				 * 	margin-right  右外边距的margin为auto则会将外边距设置为最大值，内联元素支持水平方向的外边距
				 * 	margin-bottom   内联元素不支持垂直外边距
				 * 	margin-left   左外边距的margin为auto则会将外边距设置为最大值，内联元素支持水平方向的外边距
					如果将left和right同时设置为auto，则会将两侧的外边距设置为相同的值,将会水平居中margin：0 auto



			*一般开发时，需要清除浏览器的默认样式
					*{margin：0；
					  padding:0;}


			*改变元素的类型
				display：inline	将元素作为内联元素显示
				display：block	将元素作为块元素显示
				display：inline-block	将一个元素转换为行内块元素，既有行内（内联）元素的特点又有块元素的特点
							既可以设置内联元素的宽高又可以不独占一行
				display：none	隐藏元素，既不显示元素也不占位置
				visibility:visible默认值，元素会显示
				visibility:hidden 元素会隐藏，但是会占位置




				 * 子元素默认是存在于父元素的内容区中，
				 * 		理论上讲子元素的最大可以等于父元素内容区大小
				 * 	如果子元素的大小超过了父元素的内容区，则超过的大小会在父元素以外的位置显示，
				 * 		超出父元素的内容，我们称为溢出的内容
				 *  父元素默认是将溢出内容，在父元素外边显示，
				 * 	通过overflow可以设置父元素如何处理溢出内容：
				 * 		可选值：
				 * 			- visible，默认值，不会对溢出内容做处理，元素会在父元素以外的位置显示
				 * 			- hidden, 溢出的内容，会被修剪，不会显示
				 * 			- scroll, 会为父元素添加滚动条，通过拖动滚动条来查看完整内容
				 * 					- 该属性不论内容是否溢出，都会添加水平和垂直双方向的滚动条
				 * 			*- auto，会根据需求自动添加滚动条，
				 * 						需要水平就添加水平
				 * 						需要垂直就添加垂直
				 * 						都不需要就都不加


 
				 * 块元素在文档流中默认垂直排列，所以三个div自上至下依次排开，
				 * 	如果希望块元素在页面中水平排列，可以使块元素脱离文档流
				 * 使用float来使元素浮动，从而脱离文档流
				 * 	可选值：
				 * 		none，默认值，元素默认在文档流中排列
				 * 		left，元素会立即脱离文档流，向页面的左侧浮动
				 * 		right，元素会立即脱离文档流，向页面的右侧浮动	






			*清除浮动 clear可以用来清除其他浮动元素对当前元素的影响
				 * 可选值：
				 * 		none，默认值，不清除浮动
				 * 		left，清除左侧浮动元素对当前元素的影响
				 * 		right，清除右侧浮动元素对当前元素的影响
				 * 		both，清除两侧浮动元素对当前元素的影响
				 * 				清除对他影响最大的那个元素的浮动


	・		 *通过before，after伪类，在要清除元素添加class=“clearfix”，
			 * 可以通过after伪类向元素的最后添加一个空白的块元素，然后对其清除浮动，
			 * 	这样做和添加一个div的原理一样，可以达到一个相同的效果，

				既可以解决高度塌陷，又可以确保父元素和子元素的垂直外边距不会重叠
			 * 	而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用
			选中
			.clearfix:before,
			.clearfix:after{
				/*添加一个内容*/
				content: "";
				/*转换为一个块元素*/
				display: block;
				/*清除两侧的浮动*/
				clear: both;

			}
			 * 在IE6中不支持after伪类,
			 * 	所以在IE6中还需要使用hasLayout来处理
			 */
			.clearfix{
				zoom:1;
			}


			

				 * 定位：
				 * 	- 定位指的就是将指定的元素摆放到页面的任意位置
				 * 		通过定位可以任意的摆放元素
				 * 	- 通过position属性来设置元素的定位
				 * 		-可选值：
				 * 			static：默认值，元素没有开启定位
				 * 			relative：开启元素的相对定位
				 * 			absolute：开启元素的绝对定位
				 * 			fixed：开启元素的固定定位（也是绝对定位的一种）
				 
				 * 当开启了元素的定位（position属性值是一个非static的值）时，
				 * 	可以通过left right top bottom四个属性来设置元素的偏移量
				 * 	left：元素相对于其定位位置的左侧偏移量，向右移
				 * 	right：元素相对于其定位位置的右侧偏移量，向左移
				 * 	top：元素相对于其定位位置的上边的偏移量，向下移
				 * 	bottom：元素相对于其定位位置下边的偏移量，向上移



				*相对定位relative
					
				 * 	1.当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化
				 *  	2.相对定位是相对于元素在文档流中原来的位置进行定位
				 * 	3.相对定位的元素不会脱离文档流
				 * 	4.相对定位会使元素提升一个层级
				 * 	5.相对定位不会改变元素的性质，块还是块，内联还是内联



				 *绝对定位absolute
				 *	1.当开启了绝对定位时，元素会脱离文档流
				 *	2.当开启了元素的绝对定位以后，而不设置偏移量时，元素不会发生任何变化
				 *	3.绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的（一般情况下，子元素开启了绝对定位，父元素也要开启相对定位），如果所有祖先元素都没开启定位，则会相对于浏览器最左上窗口进行定位
				 *	4.绝对定位会使元素提升一个层级
				 *	5.绝对定位会改变元素性质，内联元素变为块元素，块元素的宽度高度会默认被内容撑开



				
				 *固定定位fixed
				 * 当元素的position属性设置fixed时，则开启了元素的固定定位
				 * 	固定定位也是一种绝对定位，它的大部分特点都和绝对定位一样
				 * 不同的是：
				 * 		固定定位永远都会相对于浏览器窗口进行定位
				 * 		固定定位会固定在浏览器窗口某个位置，不会随滚动条滚动





				*设置元素的透明背景
					*用opacity设置，需要0-1的值，0代表完全透明，0.5表示半透明，1表示不透明
					*在IE8以下浏览器，opacity不适用，要用filter：alpha(opacity=透明度)，透明度为0-100的值
				例：
				/*设置透明*/
				opacity: 0.5;
				/*兼容IE8透明*/
				filter: alpha(opacity=50);
					
		}
				</style>

				

				
				普通选择器:通过标签选中元素	
				语法：标签{}
				例:<h1>我是标题</h1>
					
				h1{}


				id选择器，通过id来选中页面中的元素
				语法：#id的属性值{}
				例:<p id="p1">锄禾日当午</p>

				#pi{}


				类选择器，通过class来选中元素，class和id用法一样只不过class可以重复，id只能唯一
				语法：.class的属性值{}
				例:
				<p class="p2">锄禾日当午</p>
				<p class="p2">锄禾日当午</p>
				<span class="p2">锄禾日当午</span>

				.p2{}

				并集选择器（选择器分组）
				为h1,p1,p2同时设置样式
				语法：选择器1，选择器2，选择器N....{}
				例:
					h1,#p1,.p2
					{color:red;}


				交集选择器(复合选择器),可以同时满足多个条件的选择的元素
				为class为p2的span元素设置样式
				语法：选择器1选择器2选择器N....{}  选择器之间不用隔开
				例：span.p2{}


				通配选择器，可以选择页面中所有元素
				语法：*{}



				后代元素选择器
				<div>
					<span>我是后代</span>
					<p><span>我是孙子</span></p>
				</div>
				<span>我不是后代</span>
				选择div中的span元素设置样式
				语法：祖先元素 后代元素{}
				例：div span{}


				子元素选择器
				<div>
					<span>我是后代</span>
					<p><span>我是孙子</span></p>
				</div>
				选中指定父元素的子元素，不选中<p><span>我是孙子</span></p>
				语法：父元素 > 子元素{}
				例：div > span{}

			
				兄弟元素选择器
				语法：前一个+后一个,
				作用：可以选择一个元素紧挨着的指定的兄弟元素
				语法：前一个~后边所有
				作用：选中后边的所以兄弟元素
				例：
					<p>我是P标签</p>
					<p>我是P标签</p>
					<span>我是P标签</span>
					<p>我是P标签</p>
					<p>我是P标签</p>
				span+p{	}...>将会选中第三个p
				span~p{	}...>将会选中第三和第四个p
				


				否定伪类选择器
				作用：可以从已选中的元素在剔除某些元素
				语法：
					：not(选择器)
				例：
					
					<p>我是P标签</p>
					<p>我是P标签</p>
					<span>我是P标签</span>
					<p class="hello">我是P标签</p>
					<p>我是P标签</p>
				
				p：not(.hello){}...>将会为除了hello的其他p标签设置样式


			


		 选择器优先级的规则
			 * 		内联样式 ， 优先级  1000
			 * 		id选择器，优先级   100
			 * 		类和伪类， 优先级   10
			 * 		元素选择器，优先级 1 
			 * 		通配 * ，    优先级 0
			 * 		继承的样式，没有优先级
			 * 
			 * 当选择器中包含多种选择器时，需要将多种选择器的优先级相加然后在比较，
			 * 	但是注意，选择器优先级计算不会超过他的最大的数量级，如果选择器的优先级一样，
			 * 	则使用靠后的样式。
			 * 
			 *  并集选择器的优先级是单独计算
				
				
		-->
		
		
		<!--
        	!!!!注意，当样式表在外部时，不用使用<style type="text/css">
				
			将样式表编写到外部的CSS文件中,然后通过link标签来将外部的CSS文件引入到当前页面中，
			这样外部文件中的css样式表将会应用到当前页面中。
			
			将CSS样式统一编写到外部的样式表中，完全使结构和表现分离，可以是样式表可以在不同的页面中使用，
			最大限度的使样式可以进行复用，将样式统一写在样式表中，然后通过link标签引入，可以利用浏览器的缓存
			加快用户访问的速度提高了用户体验，所以在开发中我们最推荐使用的方式就是外部的CSS文件
			link使用方式<link rel="stylesheet" type="text/css" href="外部样式表的位置" />
        -->
		<link rel="stylesheet" type="text/css" href="css/style.css"/>
		




		 * border-collapse: collapse;可以用来设置表格的边框合并




		<!--给链接指定样式
		*（伪类选择器）
			a:link正常链接（没访问过的链接）
			a:visited访问过的链接，这个只能设置字体颜色
			a:hover鼠标滑过的链接
			a:active正在点击的链接
			hover和active不仅仅可以给链接设置，也可以给其他元素设置

					/*
			 * 涉及到a的伪类一共有四个：
			 * 	:link
			 *  :visited
			 * 	:hover
			 * 	:active
			 * 而这四个选择器的优先级是一样的。
			 *写的时候最好也以link  visited  hover  active 的顺序写
-->
					
		<!--
        	伪元素
        	:first-letter  为首字设置样式
        	:first-line    为首行设置样式
        	例：p:first-letter
        		{	color:red;}
       --> 


		<!--focus，也是伪类，作用是获取焦点，
			input:focus{background：yello}
					作用是当点击文本框时，获取焦点后修改背景为黄色-->

		<!-- title网页的标题标签，默认会显示在浏览器的标题栏中
				搜索引擎在检索页面时，会首先检索title标签中的内容
				它是网页中对于搜索引擎来说最重要的内容，会影响到网页在搜索引擎中的排名-->
				
				
		<title>网页的标题</title>


	</head>



	<!--
		body标签用来设置网页的主体内容，网页中所有可见的内容，都应该在body中编写
	 -->
	<body>		

		<!-- h1~h6是六个标题-->
		<h1>这是我的第二个网页</h1>


		<!-- 
			段落标签，段落标签用于表示内容中的一个自然段
			使用p标签来表示一个段落
			p标签中的文字，默认会独占一行，并且段与段之间会有一个间距
		-->
		<p>我是一个p标签，我用来表示一个段落</p>



		<!-- <br />标签来表示一个换行,自结束标签-->
		<p>
			锄禾日当午，<br />
			汗滴禾下土，<br />
			谁知盘中餐，<br />
			粒粒皆辛苦。<br />
		</p>

		<!--	p标签中，

			em和strong
				这两个标签都表示强调的内容
					em主要表示语气的强调，默认斜体显示
					strong主要表示强调的内容。默认粗体表示

				例：<p>我是一个<em>p</em>标签，我用来表示<strong>一个段落</strong></p>


			i标签和b标签
					i标签的内容会斜体显示
					b标签的内容会粗体显示
					但他们没有任何的语义，是纯表现标签，
					h5规范中规定，对于不需要着重强调的内容，
					而只需要斜体或者粗体。可以使用i和b
				例：<p>我是一个<i>p</i>标签，我用来表示<b>一个段落</b></p>


			small标签
					标签中的内容会比其他父元素文字小，在h5中small用来表示一些细则的内容
				例：<p>我是一个<small>p</small>标签，我用来表示<small>一个段落</small></p>	


			cite标签
					网页中所有的加书名号的内容都可以用cite
				例：<p><cite>《七龙珠》</cite>很好看</p>	


			q标签
					标签表示短的引用（行内引用），浏览器会默认加“	”,
				例：<p>子曰：<q>学而时习之不亦说乎</q></p>


			blockquote标签
					标签表示一个长引用（块引用），不能放p元素里边，放div里
				例：<p>子曰：<blockquote>学而时习之不亦说乎</blockquote></p>


			sup标签
					可以设置上标
				例：<p>2<sup>9</sup></p>

				<p>孙悟空<sup><a href="http://www.baidu.com">[1]</sup></p>

			sub标签
					可以设置下标
				例：<p>H<sub>2</sub>O</p>

			del标签
					表示删除的内容，会添加删除线
				例：	<p><del>原价</del></p>
					<p>现在价格</p>

			ins标签
					表示插入的内容，会自动添加下划线
				例：<p>只是<ins>填空</ins>题</p>

			pre标签
					预格式标签，会将代码中的格式保存，怎么写怎么显示
				例：<pre>a
						b
							c</pre>

			code标签
					专门用来表示这是一段代码，不保留格式，一般结合使用pre和code一起用
			例：	<code>
					<pre> a
						 b
						    c
					</pre>
				</code>
	
-->
		<p>我是一个<em>p</em>标签，我用来表示<strong>一个段落</strong></p>

		<p>我是一个<i>p</i>标签，我用来表示<b>一个段落</b></p>
		<br/><br/>
		<p>我是一个<small>p</small>标签，我用来表示<small>一个段落</small></p>
	
		<p><cite>《七龙珠》</cite>很好看</p>

		<p>子曰：<q>学而时习之不亦说乎</q></p>

		<p>子曰：<blockquote>学而时习之不亦说乎</blockquote></p>

		<p>2<sup>9</sup></p>
		<p>H<sub>2</sub>O</p>
		<p><del>原价</del></p>
		<p>现在价格</p>
		<p>孙悟空<sup><a href="http://www.baidu.com">[1]</a></sup></p>

		




		<!--hr标签也是一个自结束标签，可以在页面中生成一条水平线-->
		<hr />


		<!-- 在HTML中，一些如< >这种特殊字符是不能直接使用，
				需要使用一些特殊的符号来表示这些特殊字符，这些特殊符号我们称为实体（转义字符串）
				浏览器解析到实体时，会自动将实体转换为其对应的字符
			实体的语法：
				&实体的名字;
					<  &lt;
					>  &gt;
					空格  &nbsp;
					版权符号 &copy;-->
		a&lt;b&gt;c
		<p>&copy;&divide;今天天气&nbsp;&nbsp;&nbsp;好晴朗，处处好风光</p>



		<!--
			无序列表
				- 使用ul标签来创建一个无序列表
				- 使用li在ul中创建一个一个的列表项，
					一个li就是一个列表项
					
			通过type属性可以修改无序列表的项目符号
				可选值：
					disc，默认值，实心的圆点
					square，实心的方块
					circle，空心的圆
					
			注意：默认的项目符号我们一般都不使用！！
				如果需要设置项目符号，则可以采用为li设置背景图片的方式来设置
			

			在head中使用这个可以去掉项目符号
			<style type="text/css">
			
			ul{
				list-style: none;
			}
			
		</style>
				
				
		-->
			<ul>
			<li>西门大官人</li>
			
			<li>柴大官人</li>
			
			<li>许大官人</li>
			
			<li>唐僧大官人</li>
			</ul>




		<!-- 
			有序列表和无序列表类似，只不过它使用ol来代替ul
			有序列表使用有序的序号作为项目符号
			type属性，可以指定序号的类型
				可选值：1，默认值，使用阿拉伯数字
						a/A 采用小写或大写字母作为序号
						i/I 采用小写或大写的罗马数字作为序号
						
			ol也是块元素	
					列表之间都是可以互相嵌套，可以在无序列表中放个有序列表
				也可以在有序列表中放一个无序列表		
		-->
		<ol type="I">
				<li>结构</li>
			
				<li>表现</li>
			
				<li>行为</li>
		</ol>


			<!--
			定义列表用来对一些词汇或内容进行定义
			使用dl来创建一个定义列表
				dl中有两个子标签
					dt ： 被定义的内容
					dd ： 对定义内容的描述
			同样dl和ul和ol之间都可以互相嵌套		
		-->
			<dl>
			
				<dt>武松</dt>
			
				<dd>景阳冈打虎英雄，战斗力99</dd>
			
				<dd>后打死西门庆，投奔梁山</dd>
				<dt>武大</dt>
				<dd>著名餐饮企业家，战斗力0</dd>
		
			</dl>
			

		


		<!-- 
			使用超链接可以让我们从一个页面跳转到另一个页面
			使用a标签来创建一个超链接	
			属性：
				href:指向链接跳转的目标地址,可以写一个相对路径也可以写一个完整的地址
		-->
		
		<a href="http://www.baidu.com">我是一个超链接</a> <br /><br />
		
		<a href="http://www.iqiyi.com/">我是一个超链接</a> <br />

		
		<!-- a标签中的target属性可以用来指定打开链接的位置
				可选值：
					_self，表示在当前窗口中打开（默认值）
					_blank，在新的窗口中打开链接
					可以设置一个内联框架的name属性值，链接将会在指定的内联框架中打开-->
		<a href="http://www.huya.com" target="tom">我是一个超链接</a><br></br>
		<a href="http://www.huya.com" target="_blank">我是一个超链接</a><br>
		<br /> <br />
		<!-- 使用内联框架可以引入一个外部的页面
				使用iframe来创建一个内联框架
				属性：
					src ：指向一个外部页面的路径，可以使用相对路径
					name ：可以为内联框架指定一个name属性
					
			在现实开发中不推荐使用内联框架，因为内联框架中的内容不会被搜索引擎所检索		-->
		<iframe src="js\demo2.html" name="tom"></iframe>
	
		<!-- center标签中的内容，会默认在页面中居中显示 
				我们可以将要居中的元素，全都放到center中
		-->
		
		<center>
			<p>我是一个p标签</p>
		</center>
			


		<!-- div是块元素，自占一行，不会有默认样式，主要来表示一个区域
			p、h1...这些也会自占一行，但是有默认的样式，比如两个之间的间距
			块元素主要用来做页面布局-->
		<div>我是一个块元素</div>

		<!--span是一个内联元素（行内元素），指的是只占自身大小的元素不会占用一行
			常见的内联元素：a、img、iframe、span
			 span标签专门用来选中文字，然后为文字设置样式-->
		<span>我是一个span</span>
			<br />




		
		<!-- 
			使用img标签来向网页中引入一个外部图片，
				img标签也是一个自结束标签
			属性：
				src：设置一个外部图片的路径
				alt：可以用来设置在图片不能显示时，对图片的描述
						搜索引擎可以通过alt属性来识别不同的图片
						如果不写alt属性，则搜索引擎不会对img中的图片进行收录
				width：可以用来修改图片的宽度,一般使用px作为单位
				height	：可以用来修改图片的高度，一般使用px作为单位
				
				宽度和高度两个属性如果指设置一个，另一个也会同时等比例调整大小
					如果两个值同时指定则按照你指定的值来设置
				一般开发中除了自适应的页面，不建议设置width和height	
		
			src属性配置的是图片的路径，目前我们所要使用的路径全都是相对路径。
			相对路径：
				相对路径指相对于当前资源所在目录的位置
				<img src="abc/bcd/2.gif" alt="这是一个大松鼠"/>
				
			可以使用../来返回一级目录,返回几级目录就写几个../	
			<img src="../../img/2.gif" alt="这是一个大松鼠"/>
		-->
		<img src="img/1.gif" alt="这是大松鼠"/>



		<!-- 
				在HTML中，使用table标签来创建一个表格
				在table标签中使用tr来表示表格中的一行，有几行就有几个tr
				在tr中需要使用td来创建一个单元格，有几个单元格就有几个td
				rowspan用来设置纵向的合并单元格，colspan横向的合并单元格
				rowspan="2"，纵向合并2个单元格+
				<table><tr><td></td></tr></table>

				在HTML中为我们提供了三个标签：
					thead 表头，thead中的内容，永远会显示在表格的头部
					tbody 表格主体，tbody中的内容，永远都会显示表格的中间
					tfoot 表格底部，tfoot中的内容，永远都会显示表格的底部
			-->


			<!--
			使用form标签创建一个表单
				form标签中必须指定一个action属性，该属性指向的是一个服务器的地址
				当我们提交表单时将会提交到action属性对应的地址
			<form action="xxxxx">	</form>
		文本框
			form中，使用input来创建一个文本框，它的type属性是text
						如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性，name表示提交内容的名字,可以自己取，在文本框中也可以指定value属性值，该值将会作为文本框的默认值显示


			label标签，专门用来选中表单中的提示文字，从而设置样式
			该标签可以指定一个for属性，该属性的值需要指定一个表单项的id值
				<label for="um">用户名</label>
				<input id="um" type="text" name="username"  /> <br /><br />
			for表示这个用户名是给id为um用的
				
				
		密码框		
			使用input创建一个密码框，它的type属性值是password
				<label for="pwd">密码 </label>
				<input id="pwd" type="password" name="password" /> <br /><br />


			
			
			<fieldset >
 在表单里可以使用fieldset进行分组，可以将一些标签放进去，代表同一个组，在fieldset中可以用legend指定一个组名。

<legend>用户爱好</legend>


		单选框
			使用input来创建一个单选按钮，它的type属性使用radio
				- 单选按钮通过name属性进行分组，name属性相同是一组按钮
				- 像这种需要用户选择但是不需要用户直接填写内容的表单项，
	还必须指定一个value属性，这样被选中的表单项的value属性值将会最终提交给服务器
						
	如果希望在单选按钮或者是多选框中指定默认选中的选项，则可以在希望选中的项中添加checked="checked"属性

	性别  <input type="radio" name="gender" value="male" id="male" />
		<label for="male">男</label>
		<input type="radio" name="gender" value="female" checked="checked" id="female" />
		<label for="female">女</label> 

		for也有另一个作用，设置之后点文字就会选中这个选项
	
			
		
		多选框
			- 使用input创建一个多选框，它的type属性使用checkbox

		<input type="checkbox" name="hobby" value="zq" />足球
		<input type="checkbox" name="hobby" value="lq" />篮球
		<input type="checkbox" name="hobby" value="ymq" checked="checked" />羽毛球
			<input type="checkbox" name="hobby" value="ppq" checked="checked"/>乒乓球

			
			</fieldset>
			
 
		下拉列表
			- 使用select来创建一个下拉列表
		下拉列表的name属性需要指定给select，而value属性需要指定给option
		可以通过在option中添加selected="selected"来将选项设置为默认选中
		当为select添加一个multiple="multiple"，则下拉列表变为一个多选的下拉列表

		<select name="star">
					
		 
			在select中可以使用optgroup对选项进行分组
				同一个optgroup中的选项是一组
			可以通过label属性来指定分组的名字	
		
			<optgroup label="女明星">
				<!-- 在下拉列表中使用option标签来创建一个一个列表项 
				<option value="fbb">范冰冰</option>
				<option value="lxr">林心如</option>
				<option value="zw">赵薇</option>
			</optgroup>
					
			<optgroup label="男明星">
				<option value="zbs" selected="selected">赵本山</option>
				<option value="ldh">刘德华</option>
				<option value="pcj">潘长江</option>
		</optgroup>
					
		</select>


		文本域
			-使用textarea创建一个文本域
				<textarea name="xxx"></textarea>


		提交按钮
			- 使用input创建一个提交按钮,它的type属性值是submit
				在提交按钮中可以通过value属性来指定按钮上的文字
			<input type="submit" value="注册" />

		重置按钮
			- <input type="reset" />可以创建一个重置按钮，
					点击重置按钮以后表单中内容将会恢复为默认值

		使用input type=button可以用来创建一个单纯的按钮，
					这个按钮没有任何功能，只能被点击



		buttom标签
			- 可以使用button标签来创建按钮
				这种方式和使用input类似，只不过由于它是成对出现的标签
					使用起来更加的灵活
			<button type="submit">提交</button>

			<button type="reset">重置</button>

			button type="button">按钮</button>
		-->

	</body>
</html>
